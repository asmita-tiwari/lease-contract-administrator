plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.11'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.allane.leasecontractadministrator'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation:'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
    implementation 'io.swagger:swagger-annotations:1.6.11'
}

checkstyle {
    configFile = file("${rootDir}/checkstyle.xml")
}

checkstyleMain {
    source = 'src/main/java'
}
checkstyleTest {
    source = 'src/test/java'
}
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    reports {
        xml.enabled true // Generate XML report
        html.enabled true // Generate HTML report
        csv.enabled false
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/allane/leasecontractadministrator/dto/**",
                    "com/allane/leasecontractadministrator/domain/**",
                    "com/allane/leasecontractadministrator/exception/**",
                    "com/allane/leasecontractadministrator/LeaseContractAdministratorApplication.*"
            ])
        }))
    }
}
tasks.withType(Checkstyle) {
    reports {

    }
}